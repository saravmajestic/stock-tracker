import React, { Component } from 'react';
import { connect } from 'react-redux';
import { meFromToken, meFromTokenSuccess, meFromTokenFailure, resetToken } from '../actions/users';
import App from '../components/App.js';
import PropTypes from 'prop-types';

const mapDispatchToProps = (dispatch) => {
  return {
  	 loadUserFromToken: () => {
  	 	let token = sessionStorage.getItem('jwtToken');
  	 	if(!token || token === '') {//if there is no token, dont bother
  	 		return;
  	 	}

  	 //fetch user from token (if server deems it's valid token)
      dispatch(meFromToken(token))
        .then((result) => {
          result.payload.json().then(response => {
            var user = response.data && response.data.userByToken;
            if (user && user.token) {
              //reset token (possibly new token that was regenerated by the server)
              sessionStorage.setItem('jwtToken', user.token);
              dispatch(meFromTokenSuccess({data: {user: user}}))
            } else {
              sessionStorage.removeItem('jwtToken');//remove token from storage
              dispatch(meFromTokenFailure({data: user}));
            }
          });
        });
  	 },
     resetMe: () =>{
     	sessionStorage.removeItem('jwtToken'); //remove token from storage
     	dispatch(resetToken());
     }
  }
}

//Sending pure: false for changing active routes 
//https://github.com/ReactTraining/react-router/issues/3536
export default connect(null, mapDispatchToProps, null, {pure: false})(App);
